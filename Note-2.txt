1)A constructor is being called right after the creation of the component, long before data to be passed to it is ready and populated, while ngOnInit only runs after the first cycle of changes to the data, so you have access to your component inputs.
2)it is preferable to use the constructor for constants, like things that are actually being hard-coded into your component, and ngOnInit for everything that depends on external data.
--------------------------------------
Angular-Core : Not dependent on anything except javascript
Angular-View: Depends on the device
Angular is Strict component driven framework.
Angular module is similar to java package
Module can have components,pipes,services etc..
Top Label module is AppModule
Angular identifies all the elements using decorator
AppModule is the starting module
Angular bootstraps from Main.ts
RouterModule.forRoot should be only one throughout the project
RouterModule.forChild should be used other module
--------------------------
npm install bootstrap --save
npm install bootstrap --save --dev (for dev environment)

Data flows down(Parent to child)-- this can be done using @input() decorator in child
Event flows up(child to parent)-- This can be done using callback function. Pass the call back function to child
Subject is used for both publish and subscribe
-----------------------------
Redux is a pattern which deals about storing data and current state of the application
Redux works with component based architecture
View->Action->Reducer
View->Reducer (Store dispatches the actions from view to reducers)
Reducer->View(Store selects the modifications from Reducer and applies to view)
Redux Store elements:
      Reducer->These are the functions which modifies data/state
      ex-  reduce(existingState,Action) and returns new state
            You should create a copy of the state and apply changes
      Action->Actions are information or events happened in view
      Views->User Interface/UI components
NgRx is most used redux implementation in angular using RxJx

SetUps:
npm install @ngrx/schematics --save-dev
npm install @ngrx/store --save
npm install @ngrx/effects --save
npm install @ngrx/entity --save
npm install @ngrx/store-devtools --save
ng generate @ngrx/schematics:store State --root --module app.module.ts
ng generate @ngrx/schematics:reducer product/Product  --module product/product.module.ts
ng generate @ngrx/schematics:action product/Product  --module product/product.module.ts
ng generate @ngrx/schematics:effect product/Product  --module product/product.module.ts

Effects are used to handle side effects.
Effects are decorator
Effects run asynchronously with respect to Store
Selectors are used to avoid repetition od codes in components and data massaging from different reducers
